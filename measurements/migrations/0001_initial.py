# Generated by Django 2.1.5 on 2019-05-02 12:44

import django.contrib.postgres.fields
import django.contrib.postgres.fields.hstore
from django.db import migrations, models
import django.db.models.deletion
from django.contrib.postgres.operations import HStoreExtension


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('transductors', '0002_energytransductor_polymorphic_ctype'),
    ]

    operations = [
        HStoreExtension(),
        migrations.CreateModel(
            name='MinutelyMeasurement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collection_time', models.DateTimeField()),
                ('frequency_a', models.FloatField(default=0)),
                ('voltage_a', models.FloatField(default=0)),
                ('voltage_b', models.FloatField(default=0)),
                ('voltage_c', models.FloatField(default=0)),
                ('current_a', models.FloatField(default=0)),
                ('current_b', models.FloatField(default=0)),
                ('current_c', models.FloatField(default=0)),
                ('active_power_a', models.FloatField(default=0)),
                ('active_power_b', models.FloatField(default=0)),
                ('active_power_c', models.FloatField(default=0)),
                ('total_active_power', models.FloatField(default=0)),
                ('reactive_power_a', models.FloatField(default=0)),
                ('reactive_power_b', models.FloatField(default=0)),
                ('reactive_power_c', models.FloatField(default=0)),
                ('total_reactive_power', models.FloatField(default=0)),
                ('apparent_power_a', models.FloatField(default=0)),
                ('apparent_power_b', models.FloatField(default=0)),
                ('apparent_power_c', models.FloatField(default=0)),
                ('total_apparent_power', models.FloatField(default=0)),
                ('power_factor_a', models.FloatField(default=0)),
                ('power_factor_b', models.FloatField(default=0)),
                ('power_factor_c', models.FloatField(default=0)),
                ('total_power_factor', models.FloatField(default=0)),
                ('dht_voltage_a', models.FloatField(default=0)),
                ('dht_voltage_b', models.FloatField(default=0)),
                ('dht_voltage_c', models.FloatField(default=0)),
                ('dht_current_a', models.FloatField(default=0)),
                ('dht_current_b', models.FloatField(default=0)),
                ('dht_current_c', models.FloatField(default=0)),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_measurements.minutelymeasurement_set+', to='contenttypes.ContentType')),
                ('transductor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='measurements_minutelymeasurement', to='transductors.EnergyTransductor')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MonthlyMeasurement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collection_time', models.DateTimeField()),
                ('generated_energy_peak_time', models.FloatField(default=0)),
                ('generated_energy_off_peak_time', models.FloatField(default=0)),
                ('consumption_peak_time', models.FloatField(default=0)),
                ('consumption_off_peak_time', models.FloatField(default=0)),
                ('inductive_power_peak_time', models.FloatField(default=0)),
                ('inductive_power_off_peak_time', models.FloatField(default=0)),
                ('capacitive_power_peak_time', models.FloatField(default=0)),
                ('capacitive_power_off_peak_time', models.FloatField(default=0)),
                ('active_max_power_peak_time', models.FloatField(default=0)),
                ('active_max_power_off_peak_time', models.FloatField(default=0)),
                ('reactive_max_power_peak_time', models.FloatField(default=0)),
                ('reactive_max_power_off_peak_time', models.FloatField(default=0)),
                ('active_max_power_list_peak_time', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.hstore.HStoreField(), default=None, size=None)),
                ('active_max_power_list_off_peak_time', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.hstore.HStoreField(), default=None, size=None)),
                ('reactive_max_power_list_peak_time', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.hstore.HStoreField(), default=None, size=None)),
                ('reactive_max_power_list_off_peak_time', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.hstore.HStoreField(), default=None, size=None)),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_measurements.monthlymeasurement_set+', to='contenttypes.ContentType')),
                ('transductor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='measurements_monthlymeasurement', to='transductors.EnergyTransductor')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='QuarterlyMeasurement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collection_time', models.DateTimeField()),
                ('generated_energy_peak_time', models.FloatField(default=0)),
                ('generated_energy_off_peak_time', models.FloatField(default=0)),
                ('consumption_peak_time', models.FloatField(default=0)),
                ('consumption_off_peak_time', models.FloatField(default=0)),
                ('inductive_power_peak_time', models.FloatField(default=0)),
                ('inductive_power_off_peak_time', models.FloatField(default=0)),
                ('capacitive_power_peak_time', models.FloatField(default=0)),
                ('capacitive_power_off_peak_time', models.FloatField(default=0)),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_measurements.quarterlymeasurement_set+', to='contenttypes.ContentType')),
                ('transductor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='measurements_quarterlymeasurement', to='transductors.EnergyTransductor')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
